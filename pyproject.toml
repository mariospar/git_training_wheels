[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool]

[tool.black]
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''
include = '\.pyi?$'
include_trailing_comma = false
line-length = 100
target-version = ['py38', 'py39', 'py310']

[tool.commitizen]
name = "cz_conventional_commits"
style = [
  [
    "qmark",
    "fg:#ff9d00 bold",
  ],
  [
    "question",
    "bold",
  ],
  [
    "answer",
    "fg:#ff9d00 bold",
  ],
  [
    "pointer",
    "fg:#ff9d00 bold",
  ],
  [
    "highlighted",
    "fg:#ff9d00 bold",
  ],
  [
    "selected",
    "fg:#cc5454",
  ],
  [
    "separator",
    "fg:#cc5454",
  ],
  [
    "instruction",
    "",
  ],
  [
    "text",
    "",
  ],
  [
    "disabled",
    "fg:#858585 italic",
  ],
]
version_files = ["git_training_wheels.__version__"]

[tool.isort]
force_grid_wrap = 0
include_trailing_comma = true
line_length = 80
multi_line_output = 3
use_parentheses = true

[tool.poetry]
authors = ["Marios Paraskevas <mariosparaskevas00@gmail.com>"]
description = "Get to know git from the CLI!"
homepage = "https://github.com/mariospar/git_training_wheels.git"
keywords = ["git", "git_training_wheels", "git tutorial"]
license = "MIT"
name = "git_training_wheels"
readme = "README.md"
repository = "https://github.com/mariospar/git_training_wheels.git"
version = "0.0.1"

[tool.poetry.dependencies]
python = "^3.8"
setuptools = "^62.1.0"

[tool.poetry.dev-dependencies]
black = { version = "^22.3.0", allow-prereleases = true }
commitizen = "^2.24.0"
commitizen-emoji = "^0.1.5"
coverage = "^6.3.2"
flake8 = "^4.0.1"
isort = "^5.10.1"
mypy = "^0.950"
pre-commit = "^2.18.1"
pylint = "^2.13.7"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
tox = "^3.25.0"
versioneer = "^0.22"

[tool.pylint.BASIC]
argument-naming-style = 'snake_case'
attr-naming-style = 'snake_case'
bad-names = '''foo,
          bar,
          baz,
          toto,
          tutu,
          tata
'''
bad-names-rgxs = ''
class-attribute-naming-style = 'any'
class-naming-style = 'PascalCase'
const-naming-style = 'UPPER_CASE'
docstring-min-length = -1
function-naming-style = 'snake_case'
good-names = '''i,
           j,
           k,
           ex,
           pk,
           fd,
           x,
           y,
           _
'''
good-names-rgxs = ''
include-naming-hint = 'no'
inlinevar-naming-style = 'any'
method-naming-style = 'snake_case'
module-naming-style = 'snake_case'
name-group = ''
no-docstring-rgx = '^_'
property-classes = 'abc.abstractproperty'
variable-naming-style = 'snake_case'

[tool.pylint.CLASSES]
defining-attr-methods = '''__init__,
                      __new__,
                      setUp,
                      __post_init__
'''
exclude-protected = '''_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make
'''
valid-classmethod-first-arg = 'cls'
valid-metaclass-classmethod-first-arg = 'cls'

[tool.pylint.DESIGN]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.format]
max-line-length = 120

[tool.pylint.FORMAT]
expected-line-ending-format = ''
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
indent-after-paren = 4
indent-string = '    '
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = 'no'
single-line-if-stmt = 'no'

[tool.pylint.IMPORTS]
allow-any-import-level = ''
allow-wildcard-with-all = 'no'
ext-import-graph = ''
import-graph = ''
int-import-graph = ''
known-standard-library = ''
known-third-party = 'enchant'
preferred-modules = ''

[tool.pylint.LOGGING]
logging-format-style = 'old'
logging-modules = 'logging'

[tool.pylint.MASTER]
extension-pkg-whitelist = ''
fail-under = '10.0'
ignore = '.git,venv'
ignore-patterns = ''
jobs = 0
limit-inference-results = 100
load-plugins = ''
persistent = 'yes'
suggestion-mode = 'yes'
unsafe-load-any-extension = 'no'

[tool.pylint."MESSAGES CONTROL"]
confidence = ''
disable = '''print-statement,
        parameter-unpacking,
        unpacking-in-except,
        old-raise-syntax,
        backtick,
        long-suffix,
        old-ne-operator,
        old-octal-literal,
        import-star-module-level,
        non-ascii-bytes-literal,
        raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead,
        apply-builtin,
        basestring-builtin,
        buffer-builtin,
        cmp-builtin,
        coerce-builtin,
        execfile-builtin,
        file-builtin,
        long-builtin,
        raw_input-builtin,
        reduce-builtin,
        standarderror-builtin,
        unicode-builtin,
        xrange-builtin,
        coerce-method,
        delslice-method,
        getslice-method,
        setslice-method,
        no-absolute-import,
        old-division,
        dict-iter-method,
        dict-view-method,
        next-method-called,
        metaclass-assignment,
        indexing-exception,
        raising-string,
        reload-builtin,
        oct-method,
        hex-method,
        nonzero-method,
        cmp-method,
        input-builtin,
        round-builtin,
        intern-builtin,
        unichr-builtin,
        map-builtin-not-iterating,
        zip-builtin-not-iterating,
        range-builtin-not-iterating,
        filter-builtin-not-iterating,
        using-cmp-argument,
        eq-without-hash,
        div-method,
        idiv-method,
        rdiv-method,
        exception-message-attribute,
        invalid-str-codec,
        sys-max-int,
        bad-python3-import,
        deprecated-string-function,
        deprecated-str-translate-call,
        deprecated-itertools-function,
        deprecated-types-field,
        next-method-defined,
        dict-items-not-iterating,
        dict-keys-not-iterating,
        dict-values-not-iterating,
        deprecated-operator-function,
        deprecated-urllib-function,
        xreadlines-attribute,
        deprecated-sys-function,
        exception-escape,
        comprehension-escape,
        missing-module-docstring,
        missing-class-docstring,
        missing-function-docstring,
        W,
        R0201,
'''
enable = 'c-extension-no-member'

[tool.pylint.MISCELLANEOUS]
notes = '''FIXME,
      XXX,
      TODO
'''

[tool.pylint.REFACTORING]
max-nested-blocks = 5
never-returning-functions = 'sys.exit'

[tool.pylint.REPORTS]
evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
output-format = 'text'
reports = 'no'
score = 'yes'

[tool.pylint.SIMILARITIES]
ignore-comments = 'yes'
ignore-docstrings = 'yes'
ignore-imports = 'no'
min-similarity-lines = 4

[tool.pylint.SPELLING]
max-spelling-suggestions = 4
spelling-dict = ''
spelling-ignore-words = ''
spelling-private-dict-file = ''
spelling-store-unknown-words = 'no'

[tool.pylint.STRING]
check-quote-consistency = 'no'
check-str-concat-over-line-jumps = 'no'

[tool.pylint.TYPECHECK]
contextmanager-decorators = 'contextlib.contextmanager'
generated-members = ''
ignore-mixin-members = 'yes'
ignore-none = 'yes'
ignore-on-opaque-inference = 'yes'
ignored-classes = 'optparse.Values,thread._local,_thread._local'
ignored-modules = ''
missing-member-hint = 'yes'
missing-member-hint-distance = 1
missing-member-max-choices = 1
signature-mutators = ''

[tool.pylint.VARIABLES]
additional-builtins = ''
allow-global-unused-variables = 'yes'
callbacks = '''cb_,
          _cb
'''
dummy-variables-rgx = '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_'
ignored-argument-names = '_.*|^ignored_|^unused_'
init-import = 'no'
redefining-builtins-modules = 'six.moves,past.builtins,future.builtins,builtins,io'

[tool.tomlsort]
all = true
ignore_case = true
in_place = true
no_header = true
